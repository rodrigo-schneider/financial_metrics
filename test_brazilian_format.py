#!/usr/bin/env python3
"""
Teste do sistema de entrada com formato brasileiro
Verifica se aceita v√≠rgulas em valores e datas DD/MM/AAAA
"""

from datetime import date

def test_value_parsing():
    """Testa parsing de valores com v√≠rgula"""
    test_cases = [
        ("4.000,00", 4000.0),
        ("4,000.00", 4000.0),  # Formato americano
        ("1.500,50", 1500.5),
        ("500", 500.0),
        ("2500.75", 2500.75),
        ("10.000,25", 10000.25)
    ]
    
    print("üß™ Testando parsing de valores monet√°rios")
    print("=" * 50)
    
    for input_value, expected in test_cases:
        try:
            # L√≥gica de convers√£o atualizada igual ao app.py
            value_str = input_value.strip()
            
            # Se cont√©m v√≠rgula, assumir formato brasileiro (1.000,00)
            if "," in value_str:
                # Remover pontos (milhares) e converter v√≠rgula para ponto decimal
                value_clean = value_str.replace(".", "").replace(",", ".")
            else:
                # Formato americano ou simples (1000.00 ou 1000)
                value_clean = value_str
            
            parsed_value = float(value_clean)
            
            status = "‚úÖ" if abs(parsed_value - expected) < 0.01 else "‚ùå"
            print(f"{status} '{input_value}' ‚Üí ${parsed_value:,.2f} (esperado: ${expected:,.2f})")
            
        except ValueError as e:
            print(f"‚ùå '{input_value}' ‚Üí ERRO: {e}")

def test_date_parsing():
    """Testa parsing de datas DD/MM/AAAA"""
    test_cases = [
        ("15/01/2024", date(2024, 1, 15)),
        ("23/06/2025", date(2025, 6, 23)),
        ("01/12/2023", date(2023, 12, 1)),
        ("29/02/2024", date(2024, 2, 29)),  # Ano bissexto
    ]
    
    print("\nüóìÔ∏è Testando parsing de datas DD/MM/AAAA")
    print("=" * 50)
    
    for input_date, expected in test_cases:
        try:
            # L√≥gica de convers√£o igual ao app.py
            day, month, year = input_date.split("/")
            parsed_date = date(int(year), int(month), int(day))
            
            status = "‚úÖ" if parsed_date == expected else "‚ùå"
            print(f"{status} '{input_date}' ‚Üí {parsed_date.strftime('%d/%m/%Y')} (esperado: {expected.strftime('%d/%m/%Y')})")
            
        except ValueError as e:
            print(f"‚ùå '{input_date}' ‚Üí ERRO: {e}")

def test_invalid_inputs():
    """Testa entradas inv√°lidas"""
    print("\n‚ö†Ô∏è Testando entradas inv√°lidas")
    print("=" * 50)
    
    invalid_values = ["abc", "4.000.000,00,50", "", "  "]
    invalid_dates = ["32/01/2024", "15/13/2024", "29/02/2023", "abc", ""]
    
    print("Valores inv√°lidos:")
    for input_value in invalid_values:
        try:
            value_clean = input_value.replace(".", "").replace(",", ".")
            if value_clean.count(".") > 1:
                parts = value_clean.split(".")
                value_clean = "".join(parts[:-1]) + "." + parts[-1]
            parsed_value = float(value_clean)
            print(f"‚ö†Ô∏è '{input_value}' ‚Üí ${parsed_value:,.2f} (deveria falhar)")
        except ValueError:
            print(f"‚úÖ '{input_value}' ‚Üí ERRO (correto)")
    
    print("\nDatas inv√°lidas:")
    for input_date in invalid_dates:
        try:
            if not input_date.strip():
                raise ValueError("Data vazia")
            day, month, year = input_date.split("/")
            parsed_date = date(int(year), int(month), int(day))
            print(f"‚ö†Ô∏è '{input_date}' ‚Üí {parsed_date.strftime('%d/%m/%Y')} (deveria falhar)")
        except ValueError:
            print(f"‚úÖ '{input_date}' ‚Üí ERRO (correto)")

if __name__ == "__main__":
    test_value_parsing()
    test_date_parsing()
    test_invalid_inputs()
    
    print("\n" + "=" * 50)
    print("üîí RESUMO DOS FORMATOS SUPORTADOS:")
    print("‚úÖ Valores: 4.000,00 | 4,000.00 | 1500.50 | 2500")
    print("‚úÖ Datas: DD/MM/AAAA (formato brasileiro)")
    print("‚úÖ Valida√ß√£o robusta de entradas inv√°lidas")
    print("=" * 50)